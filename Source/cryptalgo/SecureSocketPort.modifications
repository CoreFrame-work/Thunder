commit b392a4b6f175241ff71febaae618150ef3385991
Merge: feef8577 48054e39
Author: msieben <4319079+msieben@users.noreply.github.com>
Date:   Fri Nov 22 08:53:08 2024 +0000

    WIP on development/websocket: feef8577 [Source/crypto/SecureSocket] : correct check for invalid context

diff --cc Source/cryptalgo/SecureSocketPort.h
index 49c5d5ed,49c5d5ed..72fb4f6b
--- a/Source/cryptalgo/SecureSocketPort.h
+++ b/Source/cryptalgo/SecureSocketPort.h
@@@ -70,18 -70,18 +70,26 @@@ namespace Crypto 
              };
  
          public:
++            // Type of underlying socket
++            enum class sockettype_t : uint8_t {
++                  CLIENT_SOCKET
++                , SERVER_SOCKET
++            };
++
              Handler(Handler&&) = delete;
              Handler(const Handler&) = delete;
              Handler& operator=(const Handler&) = delete;
  
              template <typename... Args>
--            Handler(SecureSocketPort& parent, Args&&... args)
++            Handler(SecureSocketPort& parent, sockettype_t type, Args&&... args)
                  : Core::SocketPort(args...)
                  , _parent(parent)
                  , _context(nullptr)
                  , _ssl(nullptr)
                  , _callback(nullptr)
--                , _handShaking(IDLE) {
++                , _handShaking(IDLE)
++                , _type{type}
++            {
              }
              ~Handler();
  
@@@ -139,6 -139,6 +147,7 @@@
              void* _ssl;
              IValidator* _callback;
              mutable state _handShaking;
++            sockettype_t _type;
          };
  
      public:
@@@ -146,10 -146,10 +155,25 @@@
          SecureSocketPort(const SecureSocketPort&) = delete;
          SecureSocketPort& operator=(const SecureSocketPort&) = delete;
  
++    protected:
++        // Operational context
++        enum class context_t : uint8_t {
++              CLIENT_CONTEXT
++            , SERVER_CONTEXT
++        };
++
++        // For the bravehearted, and, those who derive
++        template <typename... Args>
++        SecureSocketPort(context_t context, Args&&... args)
++            : _handler{*this, context == context_t::SERVER_CONTEXT ? Handler::sockettype_t::SERVER_SOCKET : Handler::sockettype_t::CLIENT_SOCKET, args...}
++        {}
++
++    public:
          template <typename... Args>
          SecureSocketPort(Args&&... args)
--            : _handler(*this, args...) {
--        }
++            : SecureSocketPort{context_t::CLIENT_CONTEXT, args...}
++        {}
++
          ~SecureSocketPort() override {
          }
  
diff --cc Tests/unit/core/CMakeLists.txt
index eb8aa882,eb8aa882..cc4e499d
--- a/Tests/unit/core/CMakeLists.txt
+++ b/Tests/unit/core/CMakeLists.txt
@@@ -21,120 -21,120 +21,10 @@@ if(LINUX
      # IPTestAdministrator only supported on LINUX platform
  add_executable(${TEST_RUNNER_NAME}
     ../IPTestAdministrator.cpp
--   test_cyclicbuffer.cpp
--   test_cyclicbuffer_dataexchange.cpp
--   test_databuffer.cpp
--   test_dataelement.cpp
--   test_dataelementfile.cpp
--   test_doorbell.cpp
--   test_enumerate.cpp
--   test_event.cpp
--   test_filesystem.cpp
--   test_frametype.cpp
--   test_hash.cpp
--   test_hex2strserialization.cpp
--   #test_ipc.cpp
--   test_ipcclient.cpp
--   test_iso639.cpp
--   test_iterator.cpp
--   test_jsonparser.cpp
--   test_keyvalue.cpp
--   test_library.cpp
--   test_lockablecontainer.cpp
--   test_measurementtype.cpp
--   test_memberavailability.cpp
--   test_message_dispatcher.cpp
--   test_messageException.cpp
--   test_networkinfo.cpp
--   test_nodeid.cpp
--   test_numbertype.cpp
--   test_optional.cpp
--   test_parser.cpp
--   test_portability.cpp
--   test_processinfo.cpp
--   test_queue.cpp
--   test_rangetype.cpp
--   test_readwritelock.cpp
--   test_rectangle.cpp
--   test_rpc.cpp
--   test_semaphore.cpp
--   test_sharedbuffer.cpp
--   test_singleton.cpp
--   test_socketstreamjson.cpp
--   test_socketstreamtext.cpp
--   test_statetrigger.cpp
--   test_stopwatch.cpp
--   test_synchronize.cpp
--   test_synchronous.cpp
--   test_systeminfo.cpp
--   test_textfragment.cpp
--   test_textreader.cpp
--   test_thread.cpp
--   test_threadpool.cpp
--   test_time.cpp
--   test_timer.cpp
--   test_tristate.cpp
--   #test_valuerecorder.cpp
--   test_weblinkjson.cpp
--   test_weblinktext.cpp
--   test_websocketjson.cpp
--   test_websockettext.cpp
--   test_workerpool.cpp
--   test_xgetopt.cpp
++   test_websocket.cpp
  )
--#[[
--target_sources(${TEST_RUNNER_NAME} PRIVATE test_message_unit.cpp)
--target_link_libraries(${TEST_RUNNER_NAME}
--    ThunderMessaging
--)
--]]
  else()
  add_executable(${TEST_RUNNER_NAME}
--   test_databuffer.cpp
--   test_dataelement.cpp
--   test_dataelementfile.cpp
--   test_enumerate.cpp
--   test_event.cpp
--   test_filesystem.cpp
--   test_frametype.cpp
--   test_hash.cpp
--   test_hex2strserialization.cpp
--   test_iso639.cpp
--   test_iterator.cpp
--   test_jsonparser.cpp
--   test_keyvalue.cpp
--   test_library.cpp
--   test_lockablecontainer.cpp
--   test_measurementtype.cpp
--   test_memberavailability.cpp
--   test_messageException.cpp
--   test_networkinfo.cpp
--   test_nodeid.cpp
--   test_numbertype.cpp
--   test_optional.cpp
--   test_parser.cpp
--   test_portability.cpp
--   test_processinfo.cpp
--   test_queue.cpp
--   test_rangetype.cpp
--   test_readwritelock.cpp
--   test_rectangle.cpp
--   test_semaphore.cpp
--   test_singleton.cpp
--   test_statetrigger.cpp
--   test_stopwatch.cpp
--   test_synchronize.cpp
--   test_systeminfo.cpp
--   test_textfragment.cpp
--   test_textreader.cpp
--   test_thread.cpp
--   test_threadpool.cpp
--   test_time.cpp
--   test_timer.cpp
--   test_tristate.cpp
--   #test_valuerecorder.cpp
--   test_workerpool.cpp
--   test_xgetopt.cpp
  )
  endif()
  
diff --cc Tests/unit/core/test_websocket.cpp
index a2cb1f4f,a2cb1f4f..ebe33267
--- a/Tests/unit/core/test_websocket.cpp
+++ b/Tests/unit/core/test_websocket.cpp
@@@ -424,7 -424,7 +424,7 @@@ namespace Core 
              , const uint16_t receiveBufferSize
              , const std::string& prefix
          )
--            : ::Thunder::Crypto::SecureSocketPort(::Thunder::Core::SocketPort::STREAM, socket, localNode, sendBufferSize, receiveBufferSize)
++            : ::Thunder::Crypto::SecureSocketPort(::Thunder::Crypto::SecureSocketPort::context_t::CLIENT_CONTEXT, ::Thunder::Core::SocketPort::STREAM, socket, localNode, sendBufferSize, receiveBufferSize)
              , _prefix{ prefix }
              , _validator{}
          {
@@@ -440,7 -440,7 +440,7 @@@
              , const uint16_t receiveBufferSize
              , const std::string& prefix
          )
--            : ::Thunder::Crypto::SecureSocketPort(::Thunder::Core::SocketPort::STREAM, localNode, remoteNode, sendBufferSize, receiveBufferSize, sendBufferSize, receiveBufferSize)
++            : ::Thunder::Crypto::SecureSocketPort(::Thunder::Crypto::SecureSocketPort::context_t::CLIENT_CONTEXT, ::Thunder::Core::SocketPort::STREAM, localNode, remoteNode, sendBufferSize, receiveBufferSize, sendBufferSize, receiveBufferSize)
              , _prefix{ prefix }
              , _validator{}
          {
@@@ -1138,8 -1138,8 +1138,7 @@@
          WebSocketClient<CustomSecureSocketStream> client(webSocketURIPath, webSocketProtocol, webSocketURIQuery, webSocketOrigin, false, true, rawSocket, remoteNode.AnyInterface(), remoteNode, sendBufferSize, receiveBufferSize, "WebSocketClient");
  
  //        SleepMs(maxWaitTimeMs);
--
--        ASSERT_EQ(client.Open(maxWaitTimeMs), ::Thunder::Core::ERROR_NONE);
++        EXPECT_EQ(client.Open(maxWaitTimeMs), ::Thunder::Core::ERROR_NONE);
  
          SleepMs(maxWaitTimeMs);
  
diff --cc mkdocs.yml
index 8c4a46d1,8c4a46d1..18e6890b
--- a/mkdocs.yml
+++ b/mkdocs.yml
@@@ -79,7 -79,7 +79,9 @@@ nav
      - Documentation: docs.md
      - References: references/references.md
      - Filing an Issue: issuetemplate/issuetemplate.md
--
++  - RFC :
++    - WebSocket protocol: rfc/websocket.md
++    - WebSocket implementation: rfc/websocketimpl.md
  
  markdown_extensions:
    - admonition
